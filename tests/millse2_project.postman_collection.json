{
	"info": {
		"_postman_id": "4c011993-5fae-4b1c-82f9-650226e56ab7",
		"name": "portfolio-millse2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27861816"
	},
	"item": [
		{
			"name": "POST /boats",
			"item": [
				{
					"name": "201 add boat1 (user1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verify response body",
									"const newBoat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(newBoat, \"/boats/\");",
									"",
									"// Set enironment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(pm.response.json()))",
									"pm.environment.set(\"boatId1\", pm.response.json()[\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const boat1 = {",
									"    \"name\": \"Sea Witch\",",
									"    \"type\": \"Catamaran\",",
									"    \"length\": 28",
									"}",
									"",
									"pm.environment.set(\"boat1\", JSON.stringify(boat1));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{boat1}}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 add boat with missing attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"400 status code\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"400 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\"\n}"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 add boat2 with extra attributes (user2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verify response body",
									"const newBoat = JSON.parse(pm.environment.get(\"boat2\"));",
									"delete newBoat.numberOfLifeBoats;",
									"validateResponse(newBoat, \"/boats/\", {user: \"user2\"});",
									"",
									"// Set environment variables",
									"pm.environment.set(\"boat2\", JSON.stringify(pm.response.json()));",
									"pm.environment.set(\"boatId2\", pm.response.json()[\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const boat2 = {",
									"    \"name\": \"Unsinkable II\",",
									"    \"type\": \"Yacht\",",
									"    \"length\": 100,",
									"    \"numberOfLifeBoats\": 0",
									"};",
									"",
									"pm.environment.set(\"boat2\", JSON.stringify(boat2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{boat2}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 add boat with empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"400 status invalid name\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Invalid name error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"type\": \"Catamaran\",\n    \"length\": 28\n}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 add boat with name too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"400 status invalid name\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Invalid name error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY\",\n    \"type\": \"Catamaran\",\n    \"length\": 28\n}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 add boat with length too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"400 status invalid length\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Invalid length error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"The Siren's Call\",\n    \"type\": \"Catamaran\",\n    \"length\": 10000\n}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 add boat with length too short",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"400 status invalid length\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Invalid length error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"The Siren's Call\",\n    \"type\": \"Catamaran\",\n    \"length\": 0\n}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 add boat with float length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"400 status invalid length\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Invalid length error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"The Siren's Call\",\n    \"type\": \"Catamaran\",\n    \"length\": 15.2\n}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 add boat with unparseable length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"400 status invalid length\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Invalid length error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"The Siren's Call\",\n    \"type\": \"Catamaran\",\n    \"length\": \"lol\"\n}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 add boat with type too short",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"400 status invalid type\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Invalid type error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Ay-ay Capn\",\n    \"type\": \"\",\n    \"length\": 28\n}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 add boat with type too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"400 status invalid type\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Invalid type error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Ahoy Matey\",\n    \"type\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY\",\n    \"length\": 28\n}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "406 add boat with unsupported Accept header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"406 status not acceptable\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Not acceptable error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/html",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Crunchatize me, Capn!\",\n    \"type\": \"Spoon\",\n    \"length\": 28\n}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "415 add boat with unsupported Content-type header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"415 status bad content-type\", function () {",
									"    pm.response.to.have.status(415);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Bad content-type error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request body contains unsupported MIME type.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "text/html"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Crunchatize me, Capn!\",\n    \"type\": \"Spoon\",\n    \"length\": 28\n}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Add boat expired token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expiredToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mario\",\n    \"type\": \"Pipe\",\n    \"length\": 9\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Add boat missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mario\",\n    \"type\": \"Pipe\",\n    \"length\": 9\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Add boat invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Mario\",\n    \"type\": \"Pipe\",\n    \"length\": 9,\n    \"public\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 add boat3 (user1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verify response body",
									"const newBoat = JSON.parse(pm.environment.get(\"boat3\"));",
									"validateResponse(newBoat, \"/boats/\");",
									"",
									"// Set environment variables",
									"pm.environment.set(\"boat3\", JSON.stringify(pm.response.json()))",
									"pm.environment.set(\"boatId3\", pm.response.json()[\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const boat3 = {",
									"    \"name\": \"Simon Says\",",
									"    \"type\": \"Kayak\",",
									"    \"length\": 14",
									"}",
									"",
									"pm.environment.set(\"boat3\", JSON.stringify(boat3));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{boat3}}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GET /boats",
			"item": [
				{
					"name": "200 get boat no headers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify content type",
									"pm.test(\"Content-type json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.have.string(\"application/json\");",
									"});",
									"",
									"// Verify response body",
									"const boat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(boat, \"/boats/\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 get boat JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify content type",
									"pm.test(\"Content-type json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.have.string(\"application/json\");",
									"});",
									"",
									"// Verify response body",
									"const boat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(boat, \"/boats/\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 get boat3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify content type",
									"pm.test(\"Content-type json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.have.string(\"application/json\");",
									"});",
									"",
									"// Verify response body",
									"const boat = JSON.parse(pm.environment.get(\"boat3\"));",
									"validateResponse(boat, \"/boats/\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 get boat with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"404 not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"404 error message\", function () {",
									"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{invalidId}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{invalidId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "406 get boat with unsupported Accept header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"406 status not acceptable\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Not acceptable error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 attempt to get another user's boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"403 forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Wrong owner error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this boat.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 user2 get boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify content type",
									"pm.test(\"Content-type json\", () => {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.have.string(\"application/json\");",
									"});",
									"",
									"// Verify response body",
									"const boat = JSON.parse(pm.environment.get(\"boat2\"));",
									"validateResponse(boat, \"/boats/\", {user: \"user2\"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Get boat1 expired token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expiredToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Get boat1 missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Get boat1 invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 get all user1's boats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
									"",
									"// Verify response body",
									"pm.test(\"count is 2\", ()=> pm.expect(pm.response.json()[\"count\"]).to.eq(2));",
									"pm.test(\"list is populated\", ()=> pm.expect(pm.response.json()[\"data\"]).to.have.lengthOf(2));",
									"",
									"const boat1 = JSON.parse(pm.environment.get(\"boat1\"));",
									"const boat3 = JSON.parse(pm.environment.get(\"boat3\"));",
									"",
									"validateResponse(boat1, \"/boats/\", {actualObject: pm.response.json()[\"data\"][0]});",
									"validateResponse(boat3, \"/boats/\", {actualObject: pm.response.json()[\"data\"][1]});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 get all user2's boats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
									"",
									"// Verify response body",
									"pm.test(\"count is 1\", ()=> pm.expect(pm.response.json()[\"count\"]).to.eq(1));",
									"pm.test(\"list is populated\", ()=> pm.expect(pm.response.json()[\"data\"]).to.have.lengthOf(1));",
									"",
									"const boat2 = JSON.parse(pm.environment.get(\"boat2\"));",
									"",
									"validateResponse(boat2, \"/boats/\", {user: \"user2\", actualObject: pm.response.json()[\"data\"][0]});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Get all boats expired token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expiredToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Get all boats missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 Get all boats invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "PATCH /boats",
			"item": [
				{
					"name": "200 update boat name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response body",
									"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
									"validateResponse(expBoat);",
									"",
									"// Update environment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const edits = {",
									"    \"name\": \"Crunchatize me, Capn!\"",
									"}",
									"",
									"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{boat1Patch}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 update boat name and length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response body",
									"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
									"validateResponse(expBoat);",
									"",
									"// Update environment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const edits = {",
									"    \"name\": \"Slippin Jimmy\",",
									"    \"length\": 90",
									"};",
									"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{boat1Patch}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 update boat name, length, and type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response body",
									"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
									"validateResponse(expBoat);",
									"",
									"// Update environment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const edits = {",
									"    \"name\": \"Ol' Bessie\",",
									"    \"length\": 100,",
									"    \"type\": \"Paddle boat\"",
									"};",
									"",
									"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{boat1Patch}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 update boat to have same name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response body",
									"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
									"validateResponse(expBoat);",
									"",
									"// Update environment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(expBoat));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const boat1 = JSON.parse(pm.environment.get(\"boat1\"));",
									"const edits = {",
									"    \"name\": boat1.name,",
									"    \"length\": 20,",
									"    \"type\": \"Canoe\"",
									"};",
									"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{boat1Patch}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 update boat id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response body",
									"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
									"validateResponse(expBoat);",
									"",
									"// Update environment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(expBoat));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const edits = {",
									"    \"type\": \"Jetski\",",
									"    \"id\": 1",
									"}",
									"",
									"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{boat1Patch}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 update boat with empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response body",
									"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(expBoat);",
									"",
									"// Update environment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 update boat to have extra properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response body",
									"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(expBoat);",
									"",
									"// Update environment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"daysSinceLastIncident\": 1,\n    \"oshaRecordables\": 12\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 update boat to invalid name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 400\", ()=>{",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 update boat to invalid length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 400\", ()=>{",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"length\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 update boat to invalid type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 400\", ()=>{",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 update boat with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 404\", ()=> pm.response.to.have.status(404));",
									"",
									"// Verify error message",
									"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists.\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"this shouldn't get saved\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{invalidId}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{invalidId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 attempt to update another user's boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"403 forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Wrong owner error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this boat.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Silly Rabbit\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "406 update boat with unsupported Accept header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 406\", ()=>pm.response.to.have.status(406));",
									"",
									"// Verify error message",
									"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Cobra Kai\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "415 update boat with unsupported Content-type header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 415\", ()=>pm.response.to.have.status(415));",
									"",
									"// Verify error message",
									"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request body contains unsupported MIME type.\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"please don't update\"}"
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 patch boat expired token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expiredToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"junk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 patch boat missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"junk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 patch boat invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"junk\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 verify boat1 unchanged after errant requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
									"",
									"// Verify response body",
									"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(expBoat);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 verify boat2 unchanged after errant requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
									"",
									"// Verify response body",
									"const expBoat = JSON.parse(pm.environment.get(\"boat2\"));",
									"validateResponse(expBoat, {user: \"user2\"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT /boats",
			"item": [
				{
					"name": "200 update all boat attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response body",
									"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
									"validateResponse(expBoat);",
									"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const edits = {",
									"    \"name\": \"Unsinkable III\",",
									"    \"type\": \"Fishing boat\",",
									"    \"length\": 10",
									"};",
									"",
									"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{boat1Patch}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 update boat with extra attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify response body",
									"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
									"validateResponse(expBoat);",
									"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const edits = {",
									"    \"name\": \"Unsinkable IV\",",
									"    \"type\": \"Kayak\",",
									"    \"length\": 8,",
									"    \"numberOfLifeboats\": 0",
									"};",
									"",
									"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{boat1Patch}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 update boat with missing attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 400\", ()=>{",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"hank\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 update boat with empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 400\", ()=>{",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 update boat with invalid name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 400\", ()=>{",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"type\": \"Speedboat\",\n    \"length\": 99\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 update boat with invalid length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 400\", ()=>{",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"hank\",\n    \"type\": \"speedboat\",\n    \"length\": -100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 update boat with invalid type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 400\", ()=>{",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"hank\",\n    \"type\": \"\",\n    \"length\": 99\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 update boat with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 404\", ()=> pm.response.to.have.status(404));",
									"",
									"// Verify error message",
									"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists.\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"this shouldn't get saved\",\n    \"type\": \"this also shouldn't get saved\",\n    \"length\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{invalidId}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{invalidId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 attempt to update another user's boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"403 forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"Wrong owner error message\", () => {",
									"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this boat.\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Silly Rabbit\",\n    \"type\": \"Motorboat\",\n    \"length\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "406 update boat with unsupported Accept header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 406\", ()=>pm.response.to.have.status(406));",
									"",
									"// Verify error message",
									"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Cobra Kai\",\n    \"type\": \"Aircraft carrier\",\n    \"length\": 1000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "415 update boat with unsupported Content-type header Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 415\", ()=>pm.response.to.have.status(415));",
									"",
									"// Verify error message",
									"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request body contains unsupported MIME type.\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"please don't update\",\n    \"type\": \"also don't update\",\n    \"length\": 7\n}"
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "405 try to update /boats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 405\", ()=>pm.response.to.have.status(405));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"this doesn't mean anything\",\n    \"type\": \"this either\",\n    \"length\": 1000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 put boat expired token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expiredToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"a\",\n    \"type\": \"b\",\n    \"length\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 put boat missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"a\",\n    \"type\": \"b\",\n    \"length\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 put boat invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"401 Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"a\",\n    \"type\": \"b\",\n    \"length\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 verify boat1 unchanged after errant requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
									"",
									"// Verify response body",
									"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(expBoat);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 verify boat2 unchanged after errant requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
									"",
									"// Verify response body",
									"const expBoat = JSON.parse(pm.environment.get(\"boat2\"));",
									"validateResponse(expBoat, {user: \"user2\"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DEL /boats",
			"item": [
				{
					"name": "405 try to delete /boats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 405\", ()=>pm.response.to.have.status(405));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 delete boat with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"404 not found\", function () {",
									"    //Check for appropriate 404 status code",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"404 error message\", function () {",
									"     //Check for appropriate error message",
									"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No boat with this boat_id exists.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{invalidId}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{invalidId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "403 attempt to delete another user's boat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 403\", ()=>pm.expect(pm.response).to.have.status(403));",
									"",
									"// Verify error message",
									"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this boat.\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 delete boat expired token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 401\", ()=>pm.expect(pm.response).to.have.status(401));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{expiredToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 delete boat missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 401\", ()=>pm.expect(pm.response).to.have.status(401));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 delete boat invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 401\", ()=>pm.expect(pm.response).to.have.status(401));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 delete boat1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 delete boat2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 delete boat3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"204 no content\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 confirm boat1 deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"404 not found\", function () {",
									"    //Check for appropriate 404 status code",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"404 error message\", function () {",
									"     //Check for appropriate error message",
									"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No boat with this boat_id exists.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 confirm boat2 deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"404 not found\", function () {",
									"    //Check for appropriate 404 status code",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"404 error message\", function () {",
									"     //Check for appropriate error message",
									"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No boat with this boat_id exists.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 confirm boat3 deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"404 not found\", function () {",
									"    //Check for appropriate 404 status code",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Verify error message",
									"pm.test(\"404 error message\", function () {",
									"     //Check for appropriate error message",
									"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No boat with this boat_id exists.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 get all user1 boats empty list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
									"",
									"// Verify response body",
									"pm.test(\"count is 0\", ()=> pm.expect(pm.response.json()[\"count\"]).to.eq(0));",
									"pm.test(\"empty list\", ()=> pm.expect(pm.response.json()[\"data\"]).to.be.empty);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 get all user2 boats empty list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
									"",
									"// Verify response body",
									"pm.test(\"count is 0\", ()=> pm.expect(pm.response.json()[\"count\"]).to.eq(0));",
									"pm.test(\"empty list\", ()=> pm.expect(pm.response.json()[\"data\"]).to.be.empty);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt1}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Define utility functions",
					"validateResponse = (expObject, endpoint, {actualObject=pm.response.json(), user=\"user1\"}={}) => {",
					"    pm.test(\"Response body is valid\", function () {",
					"        console.log(actualObject);",
					"        // Check if the response content is valid and matches the expected values",
					"        for (prop in expObject) {",
					"            console.log(`Testing ${prop}: ${expObject[prop]}`);",
					"            pm.expect(actualObject[prop]).to.eq(expObject[prop]);",
					"        }",
					"",
					"        // Check for boat ID",
					"        pm.expect(actualObject).to.have.own.property(\"id\");",
					"",
					"        // Check if the self url is correct",
					"        const self_url = pm.environment.get(\"app_url\") + endpoint + actualObject[\"id\"];",
					"        pm.expect(actualObject[\"self\"]).to.eq(self_url);",
					"",
					"        // Check for expected user",
					"        const expUser = pm.environment.get(user);",
					"        pm.expect(actualObject[\"user\"]).to.eq(expUser);",
					"    });",
					"",
					"}",
					"",
					"applyEdits = (objName, editName) => {",
					"    const edits = JSON.parse(pm.environment.get(editName));",
					"    const obj = JSON.parse(pm.environment.get(objName));",
					"    Object.keys(obj).forEach(key => key !== \"id\" && (obj[key] = edits[key] || obj[key]));",
					"    return obj;",
					"}",
					""
				]
			}
		}
	]
}