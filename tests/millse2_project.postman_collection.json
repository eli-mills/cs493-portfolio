{
	"info": {
		"_postman_id": "4c011993-5fae-4b1c-82f9-650226e56ab7",
		"name": "portfolio-millse2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27861816"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "200 get users authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect200();",
									"",
									"// Validate response body",
									"const user1 = {\"sub\": pm.environment.get(\"user1\")};",
									"const user2 = {\"sub\": pm.environment.get(\"user2\")};",
									"const exp = [user1, user2];",
									"pm.test(\"user1 present\", ()=>pm.expect(pm.response.json()).to.have.deep.members(exp));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set userId's, courtesy of Professor Nauman Chaudhry on Ed post #256",
									"function get_sub(jwt) {",
									"    var parts = jwt.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1])).sub;",
									"}",
									"",
									"pm.environment.set(\"user1\", get_sub(pm.environment.get(\"jwt1\")))",
									"pm.environment.set(\"user2\", get_sub(pm.environment.get(\"jwt2\")))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{app_url}}/users",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 get users unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect200();",
									"",
									"// Validate response body",
									"const user1 = {\"sub\": pm.environment.get(\"user1\")};",
									"const user2 = {\"sub\": pm.environment.get(\"user2\")};",
									"const exp = [user1, user2];",
									"pm.test(\"user1 present\", ()=>pm.expect(pm.response.json()).to.have.deep.members(exp));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/users",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "406 unacceptable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect406();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/users",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "boats",
			"item": [
				{
					"name": "POST /boats",
					"item": [
						{
							"name": "201 add boat1 (user1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"201 status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Verify response body",
											"const newBoat = JSON.parse(pm.environment.get(\"boat1\"));",
											"validateResponse(newBoat, \"/boats/\");",
											"",
											"// Set enironment variables",
											"pm.environment.set(\"boat1\", JSON.stringify(pm.response.json()))",
											"pm.environment.set(\"boatId1\", pm.response.json()[\"id\"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const boat1 = {",
											"    \"name\": \"Sea Witch\",",
											"    \"type\": \"Catamaran\",",
											"    \"length\": 28",
											"}",
											"",
											"pm.environment.set(\"boat1\", JSON.stringify(boat1));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{boat1}}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add boat with missing attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"400 error message\", function () {",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\"\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 add boat2 with extra attributes (user2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"201 status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Verify response body",
											"const newBoat = JSON.parse(pm.environment.get(\"boat2\"));",
											"delete newBoat.numberOfLifeBoats;",
											"validateResponse(newBoat, \"/boats/\", {user: \"user2\"});",
											"",
											"// Set environment variables",
											"pm.environment.set(\"boat2\", JSON.stringify(pm.response.json()));",
											"pm.environment.set(\"boatId2\", pm.response.json()[\"id\"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const boat2 = {",
											"    \"name\": \"Unsinkable II\",",
											"    \"type\": \"Yacht\",",
											"    \"length\": 100,",
											"    \"numberOfLifeBoats\": 0",
											"};",
											"",
											"pm.environment.set(\"boat2\", JSON.stringify(boat2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{boat2}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add boat with empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid name\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid name error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"type\": \"Catamaran\",\n    \"length\": 28\n}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add boat with name too long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid name\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid name error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY\",\n    \"type\": \"Catamaran\",\n    \"length\": 28\n}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add boat with length too long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid length\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid length error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"The Siren's Call\",\n    \"type\": \"Catamaran\",\n    \"length\": 10000\n}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add boat with length too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid length\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid length error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"The Siren's Call\",\n    \"type\": \"Catamaran\",\n    \"length\": 0\n}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add boat with float length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid length\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid length error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"The Siren's Call\",\n    \"type\": \"Catamaran\",\n    \"length\": 15.2\n}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add boat with unparseable length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid length\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid length error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"The Siren's Call\",\n    \"type\": \"Catamaran\",\n    \"length\": \"lol\"\n}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add boat with type too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid type\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid type error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ay-ay Capn\",\n    \"type\": \"\",\n    \"length\": 28\n}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add boat with type too long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid type\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid type error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ahoy Matey\",\n    \"type\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY\",\n    \"length\": 28\n}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 add boat with unsupported Accept header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"406 status not acceptable\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Not acceptable error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Crunchatize me, Capn!\",\n    \"type\": \"Spoon\",\n    \"length\": 28\n}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "415 add boat with unsupported Content-type header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"415 status bad content-type\", function () {",
											"    pm.response.to.have.status(415);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Bad content-type error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request body contains unsupported MIME type.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "text/html"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Crunchatize me, Capn!\",\n    \"type\": \"Spoon\",\n    \"length\": 28\n}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Add boat expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Mario\",\n    \"type\": \"Pipe\",\n    \"length\": 9\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Add boat missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Mario\",\n    \"type\": \"Pipe\",\n    \"length\": 9\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Add boat invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Mario\",\n    \"type\": \"Pipe\",\n    \"length\": 9,\n    \"public\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 add boat3 (user1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"201 status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Verify response body",
											"const newBoat = JSON.parse(pm.environment.get(\"boat3\"));",
											"validateResponse(newBoat, \"/boats/\");",
											"",
											"// Set environment variables",
											"pm.environment.set(\"boat3\", JSON.stringify(pm.response.json()))",
											"pm.environment.set(\"boatId3\", pm.response.json()[\"id\"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const boat3 = {",
											"    \"name\": \"Simon Says\",",
											"    \"type\": \"Kayak\",",
											"    \"length\": 14",
											"}",
											"",
											"pm.environment.set(\"boat3\", JSON.stringify(boat3));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{boat3}}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "GET /boats",
					"item": [
						{
							"name": "200 get boat no headers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify content type",
											"pm.test(\"Content-type json\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.have.string(\"application/json\");",
											"});",
											"",
											"// Verify response body",
											"const boat = JSON.parse(pm.environment.get(\"boat1\"));",
											"validateResponse(boat, \"/boats/\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get boat JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify content type",
											"pm.test(\"Content-type json\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.have.string(\"application/json\");",
											"});",
											"",
											"// Verify response body",
											"const boat = JSON.parse(pm.environment.get(\"boat1\"));",
											"validateResponse(boat, \"/boats/\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get boat3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify content type",
											"pm.test(\"Content-type json\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.have.string(\"application/json\");",
											"});",
											"",
											"// Verify response body",
											"const boat = JSON.parse(pm.environment.get(\"boat3\"));",
											"validateResponse(boat, \"/boats/\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 get boat with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"404 not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"404 error message\", function () {",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{invalidId}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 get boat with unsupported Accept header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"406 status not acceptable\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Not acceptable error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 attempt to get another user's boat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"403 forbidden\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Wrong owner error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this endpoint.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 user2 get boat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify content type",
											"pm.test(\"Content-type json\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.have.string(\"application/json\");",
											"});",
											"",
											"// Verify response body",
											"const boat = JSON.parse(pm.environment.get(\"boat2\"));",
											"validateResponse(boat, \"/boats/\", {user: \"user2\"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Get boat1 expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Get boat1 missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Get boat1 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get all user1's boats",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"pm.test(\"count is 2\", ()=> pm.expect(pm.response.json()[\"count\"]).to.eq(2));",
											"pm.test(\"list is populated\", ()=> pm.expect(pm.response.json()[\"data\"]).to.have.lengthOf(2));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get all user2's boats",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"pm.test(\"count is 1\", ()=> pm.expect(pm.response.json()[\"count\"]).to.eq(1));",
											"pm.test(\"list is populated\", ()=> pm.expect(pm.response.json()[\"data\"]).to.have.lengthOf(1));",
											"",
											"const boat2 = JSON.parse(pm.environment.get(\"boat2\"));",
											"",
											"validateResponse(boat2, \"/boats/\", {user: \"user2\", actualObject: pm.response.json()[\"data\"][0]});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Get all boats expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Get all boats missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Get all boats invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PATCH /boats",
					"item": [
						{
							"name": "200 update boat name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
											"validateResponse(expBoat, \"/boats/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"name\": \"Crunchatize me, Capn!\"",
											"}",
											"",
											"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{boat1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update boat name and length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
											"validateResponse(expBoat, \"/boats/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"name\": \"Slippin Jimmy\",",
											"    \"length\": 90",
											"};",
											"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{boat1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update boat name, length, and type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
											"validateResponse(expBoat, \"/boats/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"name\": \"Ol' Bessie\",",
											"    \"length\": 100,",
											"    \"type\": \"Paddle boat\"",
											"};",
											"",
											"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{boat1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update boat to have same name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
											"validateResponse(expBoat, \"/boats/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"boat1\", JSON.stringify(expBoat));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const boat1 = JSON.parse(pm.environment.get(\"boat1\"));",
											"const edits = {",
											"    \"name\": boat1.name,",
											"    \"length\": 20,",
											"    \"type\": \"Canoe\"",
											"};",
											"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{boat1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update boat id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
											"validateResponse(expBoat, \"/boats/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"boat1\", JSON.stringify(expBoat));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"type\": \"Jetski\",",
											"    \"id\": 1",
											"}",
											"",
											"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{boat1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update boat with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
											"validateResponse(expBoat, \"/boats/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update boat to have extra properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
											"validateResponse(expBoat, \"/boats/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"daysSinceLastIncident\": 1,\n    \"oshaRecordables\": 12\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update boat to invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update boat to invalid length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"length\": -1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update boat to invalid type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 update boat with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 404\", ()=> pm.response.to.have.status(404));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\": \"this shouldn't get saved\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{invalidId}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 attempt to update another user's boat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"403 forbidden\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Wrong owner error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this endpoint.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Silly Rabbit\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 update boat with unsupported Accept header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 406\", ()=>pm.response.to.have.status(406));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\": \"Cobra Kai\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "415 update boat with unsupported Content-type header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 415\", ()=>pm.response.to.have.status(415));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request body contains unsupported MIME type.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\": \"please don't update\"}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 patch boat expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"junk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 patch boat missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"junk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 patch boat invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"junk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 verify boat1 unchanged after errant requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
											"validateResponse(expBoat, \"/boats/\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 verify boat2 unchanged after errant requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"const expBoat = JSON.parse(pm.environment.get(\"boat2\"));",
											"validateResponse(expBoat, \"/boats/\", {user: \"user2\"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT /boats",
					"item": [
						{
							"name": "200 update all boat attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
											"validateResponse(expBoat, \"/boats/\");",
											"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"name\": \"Unsinkable III\",",
											"    \"type\": \"Fishing boat\",",
											"    \"length\": 10",
											"};",
											"",
											"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{boat1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update boat with extra attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expBoat = applyEdits(\"boat1\", \"boat1Patch\");",
											"validateResponse(expBoat, \"/boats/\");",
											"pm.environment.set(\"boat1\", JSON.stringify(expBoat));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"name\": \"Unsinkable IV\",",
											"    \"type\": \"Kayak\",",
											"    \"length\": 8,",
											"    \"numberOfLifeboats\": 0",
											"};",
											"",
											"pm.environment.set(\"boat1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{boat1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update boat with missing attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"hank\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update boat with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update boat with invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"type\": \"Speedboat\",\n    \"length\": 99\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update boat with invalid length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"hank\",\n    \"type\": \"speedboat\",\n    \"length\": -100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update boat with invalid type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"hank\",\n    \"type\": \"\",\n    \"length\": 99\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 update boat with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 404\", ()=> pm.response.to.have.status(404));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"this shouldn't get saved\",\n    \"type\": \"this also shouldn't get saved\",\n    \"length\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{invalidId}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 attempt to update another user's boat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"403 forbidden\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Wrong owner error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this endpoint.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Silly Rabbit\",\n    \"type\": \"Motorboat\",\n    \"length\": 20\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 update boat with unsupported Accept header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 406\", ()=>pm.response.to.have.status(406));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Cobra Kai\",\n    \"type\": \"Aircraft carrier\",\n    \"length\": 1000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "415 update boat with unsupported Content-type header Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 415\", ()=>pm.response.to.have.status(415));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request body contains unsupported MIME type.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"please don't update\",\n    \"type\": \"also don't update\",\n    \"length\": 7\n}"
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "405 try to update /boats",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 405\", ()=>pm.response.to.have.status(405));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"this doesn't mean anything\",\n    \"type\": \"this either\",\n    \"length\": 1000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 put boat expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"a\",\n    \"type\": \"b\",\n    \"length\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 put boat missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"a\",\n    \"type\": \"b\",\n    \"length\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 put boat invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"a\",\n    \"type\": \"b\",\n    \"length\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 verify boat1 unchanged after errant requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
											"validateResponse(expBoat, \"/boats/\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 verify boat2 unchanged after errant requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"const expBoat = JSON.parse(pm.environment.get(\"boat2\"));",
											"validateResponse(expBoat, \"/boats/\", {user: \"user2\"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DEL /boats",
					"item": [
						{
							"name": "405 try to delete /boats",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 405\", ()=>pm.response.to.have.status(405));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 delete boat with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"404 not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"404 error message\", function () {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No boat with this boat_id exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{invalidId}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 attempt to delete another user's boat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 403\", ()=>pm.expect(pm.response).to.have.status(403));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this endpoint.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 delete boat expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 401\", ()=>pm.expect(pm.response).to.have.status(401));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 delete boat missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 401\", ()=>pm.expect(pm.response).to.have.status(401));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 delete boat invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 401\", ()=>pm.expect(pm.response).to.have.status(401));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 delete boat1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"204 no content\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 delete boat2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"204 no content\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 delete boat3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"204 no content\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 confirm boat1 deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"404 not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"404 error message\", function () {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No boat with this boat_id exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 confirm boat2 deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"404 not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"404 error message\", function () {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No boat with this boat_id exists.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 confirm boat3 deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"404 not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"404 error message\", function () {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No boat with this boat_id exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get all user1 boats empty list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"pm.test(\"count is 0\", ()=> pm.expect(pm.response.json()[\"count\"]).to.eq(0));",
											"pm.test(\"empty list\", ()=> pm.expect(pm.response.json()[\"data\"]).to.be.empty);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get all user2 boats empty list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"pm.test(\"count is 0\", ()=> pm.expect(pm.response.json()[\"count\"]).to.eq(0));",
											"pm.test(\"empty list\", ()=> pm.expect(pm.response.json()[\"data\"]).to.be.empty);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "loads",
			"item": [
				{
					"name": "POST /loads",
					"item": [
						{
							"name": "201 add load1 (user1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"201 status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Verify response body",
											"const newload = JSON.parse(pm.environment.get(\"load1\"));",
											"validateResponse(newload, \"/loads/\");",
											"",
											"// Set enironment variables",
											"pm.environment.set(\"load1\", JSON.stringify(pm.response.json()))",
											"pm.environment.set(\"loadId1\", pm.response.json()[\"id\"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const load1 = {",
											"    \"volume\": 100,",
											"    \"item\": \"bearings\",",
											"    \"creation_date\": \"04/07/2005\"",
											"}",
											"",
											"pm.environment.set(\"load1\", JSON.stringify(load1));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{load1}}\n"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add load with missing attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"400 error message\", function () {",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 100,\n    \"item\": \"bearings\"\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 add load2 with extra attributes (user2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"201 status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Verify response body",
											"const newload = JSON.parse(pm.environment.get(\"load2\"));",
											"delete newload.nonsense;",
											"validateResponse(newload, \"/loads/\", {user: \"user2\"});",
											"",
											"// Set environment variables",
											"pm.environment.set(\"load2\", JSON.stringify(pm.response.json()));",
											"pm.environment.set(\"loadId2\", pm.response.json()[\"id\"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const load2 = {",
											"    \"volume\": 50,",
											"    \"item\": \"ice cream cones\",",
											"    \"creation_date\": \"04/21/2006\",",
											"    \"nonsense\": 0",
											"};",
											"",
											"pm.environment.set(\"load2\", JSON.stringify(load2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{load2}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add load with empty item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid item\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid item error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 100,\n    \"item\": \"\",\n    \"creation_date\": \"04/07/2005\"\n}\n"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add load with item too long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid name\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid name error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 100,\n    \"item\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\",\n    \"creation_date\": \"04/07/2005\"\n}\n"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add load with volume too big",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid length\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid length error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 10000,\n    \"item\": \"bearings\",\n    \"creation_date\": \"04/07/2005\"\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add load with volume too small",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid length\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid length error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 0,\n    \"item\": \"bearings\",\n    \"creation_date\": \"04/07/2005\"\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add load with float volume",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid length\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid length error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 100.52,\n    \"item\": \"bearings\",\n    \"creation_date\": \"04/07/2005\"\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add load with unparseable volume",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid length\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid length error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": \"hey\",\n    \"item\": \"bearings\",\n    \"creation_date\": \"04/07/2005\"\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add load with bad creation date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid type\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid type error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 100,\n    \"item\": \"bearings\",\n    \"creation_date\": \"June 7, 2023\"\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 add load with missing creation date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"400 status invalid type\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Invalid type error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 100,\n    \"item\": \"bearings\",\n    \"creation_date\": \"\"\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 add load with unsupported Accept header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"406 status not acceptable\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Not acceptable error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 100,\n    \"item\": \"bearings\",\n    \"creation_date\": \"04/07/2005\"\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "415 add load with unsupported Content-type header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"415 status bad content-type\", function () {",
											"    pm.response.to.have.status(415);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Bad content-type error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request body contains unsupported MIME type.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "text/html"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 100,\n    \"item\": \"bearings\",\n    \"creation_date\": \"04/07/2005\"\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Add load expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 100,\n    \"item\": \"bearings\",\n    \"creation_date\": \"04/07/2005\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Add load missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 100,\n    \"item\": \"bearings\",\n    \"creation_date\": \"04/07/2005\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Add load invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": 100,\n    \"item\": \"bearings\",\n    \"creation_date\": \"04/07/2005\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 add load3 (user1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"201 status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Verify response body",
											"const newload = JSON.parse(pm.environment.get(\"load3\"));",
											"validateResponse(newload, \"/loads/\");",
											"",
											"// Set environment variables",
											"pm.environment.set(\"load3\", JSON.stringify(pm.response.json()))",
											"pm.environment.set(\"loadId3\", pm.response.json()[\"id\"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const load3 = {",
											"    \"volume\": 25,",
											"    \"item\": \"toy drones\",",
											"    \"creation_date\": \"12/24/2016\"",
											"}",
											"",
											"pm.environment.set(\"load3\", JSON.stringify(load3));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{load3}}\n"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "GET /loads",
					"item": [
						{
							"name": "200 get load no headers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify content type",
											"pm.test(\"Content-type json\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.have.string(\"application/json\");",
											"});",
											"",
											"// Verify response body",
											"const load = JSON.parse(pm.environment.get(\"load1\"));",
											"validateResponse(load, \"/loads/\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get load JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify content type",
											"pm.test(\"Content-type json\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.have.string(\"application/json\");",
											"});",
											"",
											"// Verify response body",
											"const load = JSON.parse(pm.environment.get(\"load1\"));",
											"validateResponse(load, \"/loads/\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get load3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify content type",
											"pm.test(\"Content-type json\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.have.string(\"application/json\");",
											"});",
											"",
											"// Verify response body",
											"const load = JSON.parse(pm.environment.get(\"load3\"));",
											"validateResponse(load, \"/loads/\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 get load with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"404 not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"404 error message\", function () {",
											"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{invalidId}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 get load with unsupported Accept header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"406 status not acceptable\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Not acceptable error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 attempt to get another user's load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"403 forbidden\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Wrong owner error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this endpoint.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 user2 get load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify content type",
											"pm.test(\"Content-type json\", () => {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.have.string(\"application/json\");",
											"});",
											"",
											"// Verify response body",
											"const load = JSON.parse(pm.environment.get(\"load2\"));",
											"validateResponse(load, \"/loads/\", {user: \"user2\"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Get load1 expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Get load1 missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Get load1 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get all user1's loads",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"pm.test(\"count is 2\", ()=> pm.expect(pm.response.json()[\"count\"]).to.eq(2));",
											"pm.test(\"list is populated\", ()=> pm.expect(pm.response.json()[\"data\"]).to.have.lengthOf(2));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get all user2's loads",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"pm.test(\"count is 1\", ()=> pm.expect(pm.response.json()[\"count\"]).to.eq(1));",
											"pm.test(\"list is populated\", ()=> pm.expect(pm.response.json()[\"data\"]).to.have.lengthOf(1));",
											"",
											"const load2 = JSON.parse(pm.environment.get(\"load2\"));",
											"",
											"validateResponse(load2, \"/loads/\", {user: \"user2\", actualObject: pm.response.json()[\"data\"][0]});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Get all loads expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Get all loads missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Get all loads invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PATCH /loads",
					"item": [
						{
							"name": "200 update load item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expload = applyEdits(\"load1\", \"load1Patch\");",
											"validateResponse(expload, \"/loads/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load1\", JSON.stringify(expload));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"item\": \"buckets\"",
											"}",
											"",
											"pm.environment.set(\"load1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{load1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update load item and volume",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expload = applyEdits(\"load1\", \"load1Patch\");",
											"validateResponse(expload, \"/loads/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load1\", JSON.stringify(expload));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"item\": \"drumsticks\",",
											"    \"volume\": 90",
											"};",
											"pm.environment.set(\"load1Patch\", JSON.stringify(edits));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{load1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update load item, volume, and creation_date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expload = applyEdits(\"load1\", \"load1Patch\");",
											"validateResponse(expload, \"/loads/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load1\", JSON.stringify(expload));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"item\": \"ovals\",",
											"    \"volume\": 100,",
											"    \"creation_date\": \"04/04/2004\"",
											"};",
											"",
											"pm.environment.set(\"load1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{load1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update load to have same  item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expload = applyEdits(\"load1\", \"load1Patch\");",
											"validateResponse(expload, \"/loads/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load1\", JSON.stringify(expload));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const load1 = JSON.parse(pm.environment.get(\"load1\"));",
											"const edits = {",
											"    \"item\": load1.item,",
											"    \"volume\": 20,",
											"    \"creation_date\": \"01/01/2001\"",
											"};",
											"pm.environment.set(\"load1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{load1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update load id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expload = applyEdits(\"load1\", \"load1Patch\");",
											"validateResponse(expload, \"/loads/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load1\", JSON.stringify(expload));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"volume\": 80,",
											"    \"id\": 1",
											"}",
											"",
											"pm.environment.set(\"load1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{load1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update load with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expload = JSON.parse(pm.environment.get(\"load1\"));",
											"validateResponse(expload, \"/loads/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load1\", JSON.stringify(expload));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update load to have extra properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expload = JSON.parse(pm.environment.get(\"load1\"));",
											"validateResponse(expload, \"/loads/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load1\", JSON.stringify(expload));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"daysSinceLastIncident\": 1,\n    \"oshaRecordables\": 12\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update load to invalid item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update load to invalid volume",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"volume\": -1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update load to invalid creation_date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"creation_date\": \"01/01/01\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 update load with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 404\", ()=> pm.response.to.have.status(404));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"item\": \"this shouldn't get saved\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{invalidId}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 attempt to update another user's load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"403 forbidden\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Wrong owner error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this endpoint.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"hats\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 update load with unsupported Accept header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 406\", ()=>pm.response.to.have.status(406));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"item\": \"Cobra Kai\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "415 update load with unsupported Content-type header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 415\", ()=>pm.response.to.have.status(415));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request body contains unsupported MIME type.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"item\": \"please don't update\"}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 patch load expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"junk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 patch load missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"junk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 patch load invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"junk\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 verify load1 unchanged after errant requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"const expload = JSON.parse(pm.environment.get(\"load1\"));",
											"validateResponse(expload, \"/loads/\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 verify load2 unchanged after errant requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"const expload = JSON.parse(pm.environment.get(\"load2\"));",
											"validateResponse(expload, \"/loads/\", {user: \"user2\"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT /loads",
					"item": [
						{
							"name": "200 update all load attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expload = applyEdits(\"load1\", \"load1Patch\");",
											"validateResponse(expload, \"/loads/\");",
											"pm.environment.set(\"load1\", JSON.stringify(expload));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"item\": \"fishing rods\",",
											"    \"volume\": 30,",
											"    \"creation_date\": \"06/07/2008\"",
											"};",
											"",
											"pm.environment.set(\"load1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{load1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 update load with extra attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>{",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Verify response body",
											"const expload = applyEdits(\"load1\", \"load1Patch\");",
											"validateResponse(expload, \"/loads/\");",
											"pm.environment.set(\"load1\", JSON.stringify(expload));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"item\": \"Unsinkable IV\",",
											"    \"creation_date\": \"04/05/2006\",",
											"    \"volume\": 8,",
											"    \"numberOfLifeloads\": 0",
											"};",
											"",
											"pm.environment.set(\"load1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{load1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update load with missing attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"hank\",\n    \"junk1\": 23,\n    \"junk2\": 27\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update load with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update load with invalid item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"\",\n    \"creation_date\": \"01/07/1984\",\n    \"volume\": 99\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update load with invalid volume",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"hank\",\n    \"creation_date\": \"02/03/1994\",\n    \"volume\": -100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 update load with invalid creation_date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 400\", ()=>{",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Error description\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"One or more of the request attributes are missing or invalid.\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"hank\",\n    \"creation_date\": \"\",\n    \"volume\": 99\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 update load with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 404\", ()=> pm.response.to.have.status(404));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"this shouldn't get saved\",\n    \"creation_date\": \"01/02/2003\",\n    \"volume\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{invalidId}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 attempt to update another user's load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"403 forbidden\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"Wrong owner error message\", () => {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this endpoint.\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"Silly Rabbit\",\n    \"creation_date\": \"07/04/2004\",\n    \"volume\": 20\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "406 update load with unsupported Accept header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 406\", ()=>pm.response.to.have.status(406));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "text/html",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"Silly Rabbit\",\n    \"creation_date\": \"07/04/2004\",\n    \"volume\": 20\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "415 update load with unsupported Content-type header Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 415\", ()=>pm.response.to.have.status(415));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Request body contains unsupported MIME type.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"Silly Rabbit\",\n    \"creation_date\": \"07/04/2004\",\n    \"volume\": 20\n}"
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "405 try to update /loads",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 405\", ()=>pm.response.to.have.status(405));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"Silly Rabbit\",\n    \"creation_date\": \"07/04/2004\",\n    \"volume\": 20\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 put load expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"Silly Rabbit\",\n    \"creation_date\": \"07/04/2004\",\n    \"volume\": 20\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 put load missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"Silly Rabbit\",\n    \"creation_date\": \"07/04/2004\",\n    \"volume\": 20\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 put load invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"401 Unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"item\": \"Silly Rabbit\",\n    \"creation_date\": \"07/04/2004\",\n    \"volume\": 20\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 verify load1 unchanged after errant requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"const expload = JSON.parse(pm.environment.get(\"load1\"));",
											"validateResponse(expload, \"/loads/\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 verify load2 unchanged after errant requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"const expload = JSON.parse(pm.environment.get(\"load2\"));",
											"validateResponse(expload, \"/loads/\", {user: \"user2\"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DEL /loads",
					"item": [
						{
							"name": "405 try to delete /loads",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 405\", ()=>pm.response.to.have.status(405));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 delete load with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"404 not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"404 error message\", function () {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No load with this load_id exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{invalidId}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 attempt to delete another user's load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 403\", ()=>pm.expect(pm.response).to.have.status(403));",
											"",
											"// Verify error message",
											"pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this endpoint.\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 delete load expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 401\", ()=>pm.expect(pm.response).to.have.status(401));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 delete load missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 401\", ()=>pm.expect(pm.response).to.have.status(401));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 delete load invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 401\", ()=>pm.expect(pm.response).to.have.status(401));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 delete load1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"204 no content\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 delete load2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"204 no content\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 delete load3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"204 no content\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 confirm load1 deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"404 not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"404 error message\", function () {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No load with this load_id exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 confirm load2 deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"404 not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"404 error message\", function () {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No load with this load_id exists.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 confirm load3 deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"404 not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Verify error message",
											"pm.test(\"404 error message\", function () {",
											"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No load with this load_id exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get all user1 loads empty list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"pm.test(\"count is 0\", ()=> pm.expect(pm.response.json()[\"count\"]).to.eq(0));",
											"pm.test(\"empty list\", ()=> pm.expect(pm.response.json()[\"data\"]).to.be.empty);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get all user2 loads empty list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"pm.test(\"count is 0\", ()=> pm.expect(pm.response.json()[\"count\"]).to.eq(0));",
											"pm.test(\"empty list\", ()=> pm.expect(pm.response.json()[\"data\"]).to.be.empty);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "relationship",
			"item": [
				{
					"name": "PUT",
					"item": [
						{
							"name": "201 add boat1 (user1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"201 status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Verify response body",
											"const newBoat = JSON.parse(pm.environment.get(\"boat1\"));",
											"validateResponse(newBoat, \"/boats/\");",
											"",
											"// Set enironment variables",
											"pm.environment.set(\"boat1\", JSON.stringify(pm.response.json()))",
											"pm.environment.set(\"boatId1\", pm.response.json()[\"id\"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const boat1 = {",
											"    \"name\": \"Sea Witch\",",
											"    \"type\": \"Catamaran\",",
											"    \"length\": 28",
											"}",
											"",
											"pm.environment.set(\"boat1\", JSON.stringify(boat1));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{boat1}}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 add boat2(user1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"201 status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Verify response body",
											"const newBoat = JSON.parse(pm.environment.get(\"boat2\"));",
											"validateResponse(newBoat, \"/boats/\");",
											"",
											"// Set enironment variables",
											"pm.environment.set(\"boat2\", JSON.stringify(pm.response.json()))",
											"pm.environment.set(\"boatId2\", pm.response.json()[\"id\"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const boat2 = {",
											"    \"name\": \"Sally\",",
											"    \"type\": \"Yacht\",",
											"    \"length\": 500",
											"}",
											"",
											"pm.environment.set(\"boat2\", JSON.stringify(boat2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{boat2}}\n"
								},
								"url": {
									"raw": "{{app_url}}/boats",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 add load1 (user1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"201 status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Verify response body",
											"const newload = JSON.parse(pm.environment.get(\"load1\"));",
											"validateResponse(newload, \"/loads/\");",
											"",
											"// Set enironment variables",
											"pm.environment.set(\"load1\", JSON.stringify(pm.response.json()))",
											"pm.environment.set(\"loadId1\", pm.response.json()[\"id\"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const load1 = {",
											"    \"volume\": 100,",
											"    \"item\": \"bearings\",",
											"    \"creation_date\": \"04/07/2005\"",
											"}",
											"",
											"pm.environment.set(\"load1\", JSON.stringify(load1));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{load1}}\n"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 add load2 (user1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"201 status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Verify response body",
											"const newload = JSON.parse(pm.environment.get(\"load2\"));",
											"validateResponse(newload, \"/loads/\");",
											"",
											"// Set enironment variables",
											"pm.environment.set(\"load2\", JSON.stringify(pm.response.json()))",
											"pm.environment.set(\"loadId2\", pm.response.json()[\"id\"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const load1 = {",
											"    \"volume\": 50,",
											"    \"item\": \"beans\",",
											"    \"creation_date\": \"04/08/2016\"",
											"}",
											"",
											"pm.environment.set(\"load2\", JSON.stringify(load1));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{load2}}\n"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 add load3 (user2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"201 status code\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Verify response body",
											"const newload = JSON.parse(pm.environment.get(\"load3\"));",
											"validateResponse(newload, \"/loads/\", {user: \"user2\"});",
											"",
											"// Set enironment variables",
											"pm.environment.set(\"load3\", JSON.stringify(pm.response.json()))",
											"pm.environment.set(\"loadId3\", pm.response.json()[\"id\"]);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const load1 = {",
											"    \"volume\": 25,",
											"    \"item\": \"cans\",",
											"    \"creation_date\": \"12/12/2012\"",
											"}",
											"",
											"pm.environment.set(\"load3\", JSON.stringify(load1));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{load3}}\n"
								},
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 assign load1 to boat1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 204\", ()=>pm.expect(pm.response).to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 assign load2 to boat1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 204\", ()=>pm.expect(pm.response).to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 confirm load1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"200 status\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify carrier",
											"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
											"const actBoat = pm.response.json().carrier;",
											"validateResponse(expBoat, \"/boats/\", {actualObject: actBoat});",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load1\", JSON.stringify(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 confirm load2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"200 status\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify carrier",
											"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
											"const actBoat = pm.response.json().carrier;",
											"validateResponse(expBoat, \"/boats/\", {actualObject: actBoat});",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load2\", JSON.stringify(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get all loads",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify carriers",
											"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
											"for (const load of pm.response.json().data) {",
											"    const actBoat = load.carrier;",
											"    validateResponse(expBoat, \"/boats/\", {actualObject: actBoat});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 ensure patch does not lose carrier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"item\": \"hamster wheels\"",
											"}",
											"",
											"pm.environment.set(\"load1Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"const load1 = applyEdits(\"load1\", \"load1Patch\");",
											"console.log(JSON.stringify(load1));",
											"validateResponse(load1, \"/loads/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load1\", JSON.stringify(load1));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{load1Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 patch with carrier is ignored",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"const load1 = JSON.parse(pm.environment.get(\"load1\"));",
											"validateResponse(load1, \"/loads/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load1\", JSON.stringify(load1));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"carrier\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 ensure put does lose carrier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const edits = {",
											"    \"item\": \"buttons\",",
											"    \"volume\": 12,",
											"    \"creation_date\": \"10/12/2024\"",
											"}",
											"",
											"pm.environment.set(\"load2Patch\", JSON.stringify(edits));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify status code",
											"pm.test(\"Status 200\", ()=>pm.expect(pm.response).to.have.status(200));",
											"",
											"// Verify response body",
											"const load2 = applyEdits(\"load2\", \"load2Patch\");",
											"load2.carrier = null;",
											"validateResponse(load2, \"/loads/\");",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load2\", JSON.stringify(load2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{load2Patch}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 user2 try to assign load1 to boat1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect403Access();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 user2 try to assign load3 (own) to boat1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect403Access();",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 user1 try to assign load3 to boat1(own)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect403Access();",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId3}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 user1 try to reassign load1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect403NonNullCarrier();",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 reassign load1 to boat1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect403NonNullCarrier();",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 bad boatId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect404NotFound();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{invalidId}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{invalidId}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 bad loadId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect404NotFound();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{invalidId}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 bad loadId AND boatId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect404NotFound();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{invalidId}}/loads/{{invalidId}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{invalidId}}",
										"loads",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect401();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}",
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect401();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}",
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect401();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}",
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "403 user2 attempt to delete user1 endpoint",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt2}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 boat/load combo doesn't exist (loaded load)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect404Pair();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 boat/load combo doesn't exist (unloaded load)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect404Pair();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId2}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId2}}",
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 missing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect401();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 expired token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect401();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expiredToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect401();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 user1 delete relationship",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect204();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "404 previously deleted no longer exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect404Pair();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 get specific load",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect200();",
											"",
											"// Validate response body",
											"pm.test(\"carrier null\", ()=>pm.expect(pm.response.json().carrier).to.be.null);",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load1\", JSON.stringify(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Propagate DELETE /boat",
					"item": [
						{
							"name": "204 assign load1 to boat1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect204();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 assign load2 to boat1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect204();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}",
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 confirm load1 is assigned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect200();",
											"",
											"// Verify response body",
											"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
											"const actBoat = pm.response.json().carrier;",
											"validateResponse(expBoat, \"/boats/\", {actualObject: actBoat});",
											"",
											"pm.environment.set(\"load1\", JSON.stringify(pm.response.json()));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 confirm load2 is assigned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect200();",
											"",
											"// Verify response body",
											"const expBoat = JSON.parse(pm.environment.get(\"boat1\"));",
											"const actBoat = pm.response.json().carrier;",
											"validateResponse(expBoat, \"/boats/\", {actualObject: actBoat});",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load2\", JSON.stringify(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "204 delete boat1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect204();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{app_url}}/boats/{{boatId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"boats",
										"{{boatId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 confirm load1 is unassigned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect200();",
											"",
											"// Verify response body",
											"pm.test(\"carrier is null\", ()=> pm.expect(pm.response.json().carrier).to.be.null);",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load1\", JSON.stringify(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId1}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 confirm load2 is unassigned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"expect200();",
											"",
											"// Verify response body",
											"pm.test(\"carrier is null\", ()=> pm.expect(pm.response.json().carrier).to.be.null);",
											"",
											"// Update environment variables",
											"pm.environment.set(\"load2\", JSON.stringify(pm.response.json()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{app_url}}/loads/{{loadId2}}",
									"host": [
										"{{app_url}}"
									],
									"path": [
										"loads",
										"{{loadId2}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"expect403Access = () => {",
							"    // Verify status code",
							"    pm.test(\"Status 403\", ()=>pm.expect(pm.response).to.have.status(403));",
							"",
							"    // Verify error message",
							"    pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The authorized user does not have access to this endpoint.\"))",
							"}",
							"",
							"expect403NonNullCarrier = () => {",
							"    // Verify status code",
							"    pm.test(\"Status 403\", ()=>pm.expect(pm.response).to.have.status(403));",
							"",
							"    // Verify error message",
							"    pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The load is already loaded on another boat.\"))",
							"}",
							"",
							"expect404NotFound = () => {",
							"    // Verify status code",
							"    pm.test(\"Status 404\", ()=>pm.expect(pm.response).to.have.status(404));",
							"",
							"    // Verify error message",
							"    pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat and/or load does not exist.\"))",
							"}",
							"",
							"expect404Pair = () => {",
							"    // Verify status code",
							"    pm.test(\"Status 404\", ()=>pm.expect(pm.response).to.have.status(404));",
							"",
							"    // Verify error message",
							"    pm.test(\"Error message\", ()=>pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified boat/load pair does not exist.\"));",
							"}",
							""
						]
					}
				}
			]
		},
		{
			"name": "cleanup",
			"item": [
				{
					"name": "delete boat2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect204();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete load1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect204();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{loadId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{loadId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete load2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect204();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{loadId2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{loadId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete load3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect204();",
									"",
									"// Cleanup environment variables",
									"pm.environment.unset(\"boat1\");",
									"pm.environment.unset(\"boatId1\");",
									"pm.environment.unset(\"boat2\");",
									"pm.environment.unset(\"boatId2\");",
									"pm.environment.unset(\"boat3\");",
									"pm.environment.unset(\"boatId3\");",
									"",
									"pm.environment.unset(\"load1\");",
									"pm.environment.unset(\"loadId1\");",
									"pm.environment.unset(\"load2\");",
									"pm.environment.unset(\"loadId2\");",
									"pm.environment.unset(\"load3\");",
									"pm.environment.unset(\"loadId3\");",
									"",
									"pm.environment.unset(\"boat1Patch\");",
									"pm.environment.unset(\"load1Patch\");",
									"pm.environment.unset(\"load2Patch\");",
									"",
									"pm.environment.unset(\"user1\");",
									"pm.environment.unset(\"user2\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/loads/{{loadId3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"loads",
								"{{loadId3}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "pagination",
			"item": [
				{
					"name": "201 add boat1 (user1) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verify response body",
									"const newBoat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(newBoat, \"/boats/\");",
									"",
									"// Set enironment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(pm.response.json()))",
									"pm.environment.set(\"boatId1\", pm.response.json()[\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const boat1 = {",
									"    \"name\": \"Sea Witch\",",
									"    \"type\": \"Catamaran\",",
									"    \"length\": 28",
									"}",
									"",
									"pm.environment.set(\"boat1\", JSON.stringify(boat1));",
									"",
									"// Set userId's, courtesy of Professor Nauman Chaudhry on Ed post #256",
									"function get_sub(jwt) {",
									"    var parts = jwt.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1])).sub;",
									"}",
									"",
									"pm.environment.set(\"user1\", get_sub(pm.environment.get(\"jwt1\")))",
									"pm.environment.set(\"user2\", get_sub(pm.environment.get(\"jwt2\")))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{boat1}}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 add boat1 (user1) Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verify response body",
									"const newBoat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(newBoat, \"/boats/\");",
									"",
									"// Set enironment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(pm.response.json()))",
									"pm.environment.set(\"boatId2\", pm.response.json()[\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const boat1 = {",
									"    \"name\": \"Sea Witch\",",
									"    \"type\": \"Catamaran\",",
									"    \"length\": 28",
									"}",
									"",
									"pm.environment.set(\"boat1\", JSON.stringify(boat1));",
									"",
									"// Set userId's, courtesy of Professor Nauman Chaudhry on Ed post #256",
									"function get_sub(jwt) {",
									"    var parts = jwt.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1])).sub;",
									"}",
									"",
									"pm.environment.set(\"user1\", get_sub(pm.environment.get(\"jwt1\")))",
									"pm.environment.set(\"user2\", get_sub(pm.environment.get(\"jwt2\")))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{boat1}}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 add boat1 (user1) Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verify response body",
									"const newBoat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(newBoat, \"/boats/\");",
									"",
									"// Set enironment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(pm.response.json()))",
									"pm.environment.set(\"boatId3\", pm.response.json()[\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const boat1 = {",
									"    \"name\": \"Sea Witch\",",
									"    \"type\": \"Catamaran\",",
									"    \"length\": 28",
									"}",
									"",
									"pm.environment.set(\"boat1\", JSON.stringify(boat1));",
									"",
									"// Set userId's, courtesy of Professor Nauman Chaudhry on Ed post #256",
									"function get_sub(jwt) {",
									"    var parts = jwt.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1])).sub;",
									"}",
									"",
									"pm.environment.set(\"user1\", get_sub(pm.environment.get(\"jwt1\")))",
									"pm.environment.set(\"user2\", get_sub(pm.environment.get(\"jwt2\")))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{boat1}}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 add boat1 (user1) Copy 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verify response body",
									"const newBoat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(newBoat, \"/boats/\");",
									"",
									"// Set enironment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(pm.response.json()))",
									"pm.environment.set(\"boatId4\", pm.response.json()[\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const boat1 = {",
									"    \"name\": \"Sea Witch\",",
									"    \"type\": \"Catamaran\",",
									"    \"length\": 28",
									"}",
									"",
									"pm.environment.set(\"boat1\", JSON.stringify(boat1));",
									"",
									"// Set userId's, courtesy of Professor Nauman Chaudhry on Ed post #256",
									"function get_sub(jwt) {",
									"    var parts = jwt.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1])).sub;",
									"}",
									"",
									"pm.environment.set(\"user1\", get_sub(pm.environment.get(\"jwt1\")))",
									"pm.environment.set(\"user2\", get_sub(pm.environment.get(\"jwt2\")))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{boat1}}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 add boat1 (user1) Copy 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verify response body",
									"const newBoat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(newBoat, \"/boats/\");",
									"",
									"// Set enironment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(pm.response.json()))",
									"pm.environment.set(\"boatId5\", pm.response.json()[\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const boat1 = {",
									"    \"name\": \"Sea Witch\",",
									"    \"type\": \"Catamaran\",",
									"    \"length\": 28",
									"}",
									"",
									"pm.environment.set(\"boat1\", JSON.stringify(boat1));",
									"",
									"// Set userId's, courtesy of Professor Nauman Chaudhry on Ed post #256",
									"function get_sub(jwt) {",
									"    var parts = jwt.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1])).sub;",
									"}",
									"",
									"pm.environment.set(\"user1\", get_sub(pm.environment.get(\"jwt1\")))",
									"pm.environment.set(\"user2\", get_sub(pm.environment.get(\"jwt2\")))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{boat1}}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 add boat1 (user1) Copy 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code",
									"pm.test(\"201 status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verify response body",
									"const newBoat = JSON.parse(pm.environment.get(\"boat1\"));",
									"validateResponse(newBoat, \"/boats/\");",
									"",
									"// Set enironment variables",
									"pm.environment.set(\"boat1\", JSON.stringify(pm.response.json()))",
									"pm.environment.set(\"boatId6\", pm.response.json()[\"id\"]);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const boat1 = {",
									"    \"name\": \"Sea Witch\",",
									"    \"type\": \"Catamaran\",",
									"    \"length\": 28",
									"}",
									"",
									"pm.environment.set(\"boat1\", JSON.stringify(boat1));",
									"",
									"// Set userId's, courtesy of Professor Nauman Chaudhry on Ed post #256",
									"function get_sub(jwt) {",
									"    var parts = jwt.split('.'); // header, payload, signature",
									"    return JSON.parse(atob(parts[1])).sub;",
									"}",
									"",
									"pm.environment.set(\"user1\", get_sub(pm.environment.get(\"jwt1\")))",
									"pm.environment.set(\"user2\", get_sub(pm.environment.get(\"jwt2\")))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{boat1}}\n"
						},
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all boats pg 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect200();",
									"",
									"// Verify pagination properties",
									"pm.test(\"next link\", ()=>pm.expect(pm.response.json()).to.have.property(\"next\"));",
									"pm.test(\"count\", ()=>pm.expect(pm.response.json()).to.have.property(\"count\"));",
									"pm.test(\"count value\", ()=>pm.expect(pm.response.json()[\"count\"]).to.eq(6));",
									"pm.test(\"length\", ()=>pm.expect(pm.response.json()[\"data\"]).to.have.lengthOf(5));",
									"",
									"// Set environment variables",
									"pm.environment.set(\"nextLink\", pm.response.json()[\"next\"]);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all boats pg 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect200();",
									"",
									"// Verify pagination properties",
									"pm.test(\"next link\", ()=>pm.expect(pm.response.json()).not.to.have.property(\"next\"));",
									"pm.test(\"count\", ()=>pm.expect(pm.response.json()).to.have.property(\"count\"));",
									"pm.test(\"count value\", ()=>pm.expect(pm.response.json()[\"count\"]).to.eq(6));",
									"pm.test(\"length\", ()=>pm.expect(pm.response.json()[\"data\"]).to.have.lengthOf(1));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{nextLink}}",
							"host": [
								"{{nextLink}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 delete boat Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect204();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 delete boat Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect204();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 delete boat Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect204();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 delete boat Copy 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect204();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId4}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 delete boat Copy 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect204();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId5}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 delete boat Copy 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"expect204();",
									"",
									"// CLEANUP",
									"pm.environment.unset(\"boatId1\");",
									"pm.environment.unset(\"boatId2\");",
									"pm.environment.unset(\"boatId3\");",
									"pm.environment.unset(\"boatId4\");",
									"pm.environment.unset(\"boatId5\");",
									"pm.environment.unset(\"boatId6\");",
									"pm.environment.unset(\"boat1\");",
									"pm.environment.unset(\"nextLink\");",
									"pm.environment.unset(\"user1\");",
									"pm.environment.unset(\"user2\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/boats/{{boatId6}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"boats",
								"{{boatId6}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt1}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Define utility functions",
					"validateResponse = (expObject, endpoint, {actualObject=pm.response.json(), user=\"user1\"}={}) => {",
					"    pm.test(\"Response body is valid\", function () {",
					"        console.log(actualObject);",
					"        // Check if the response content is valid and matches the expected values",
					"        for (prop in expObject) {",
					"            console.log(`Testing ${prop}: ${expObject[prop]}`);",
					"            if (prop === \"carrier\") {",
					"                pm.expect(actualObject[prop]).to.deep.equal(expObject[prop]);",
					"            } else {",
					"                pm.expect(actualObject[prop]).to.eq(expObject[prop]);",
					"            }",
					"        }",
					"",
					"        // Check for ID",
					"        pm.expect(actualObject).to.have.own.property(\"id\");",
					"",
					"        // Check if the self url is correct",
					"        const self_url = pm.environment.get(\"app_url\") + endpoint + actualObject[\"id\"];",
					"        pm.expect(actualObject[\"self\"]).to.eq(self_url);",
					"",
					"        // Check for expected user",
					"        const expUser = pm.environment.get(user);",
					"        pm.expect(actualObject[\"user\"]).to.eq(expUser);",
					"",
					"        // If a load, check for carrier",
					"        // if (endpoint == \"/loads/\") pm.expect(actualObject[\"carrier\"]).to.be.null;",
					"    });",
					"",
					"}",
					"",
					"applyEdits = (objName, editName) => {",
					"    const edits = JSON.parse(pm.environment.get(editName));",
					"    const obj = JSON.parse(pm.environment.get(objName));",
					"    Object.keys(obj).forEach(key => key !== \"id\" && (obj[key] = edits[key] || obj[key]));",
					"    return obj;",
					"}",
					"",
					"// Status",
					"expect200 = () => {",
					"    pm.test(\"Status 200\", ()=> pm.expect(pm.response).to.have.status(200));",
					"}",
					"",
					"expect201 = () => {",
					"    pm.test(\"Status 201\", ()=> pm.expect(pm.response).to.have.status(201));",
					"}",
					"",
					"expect204 = () => {",
					"    pm.test(\"Status 204\", ()=> pm.expect(pm.response).to.have.status(204));",
					"}",
					"",
					"expect401 = () => {",
					"    pm.test(\"Status 401\", ()=> pm.expect(pm.response).to.have.status(401));",
					"}",
					"",
					"expect406 = () => {",
					"    // Verify status code",
					"    pm.test(\"406 status not acceptable\", function () {",
					"        pm.response.to.have.status(406);",
					"    });",
					"",
					"    // Verify error message",
					"    pm.test(\"Not acceptable error message\", () => {",
					"        pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Requested MIME type is not supported.\");",
					"    });",
					"}",
					""
				]
			}
		}
	]
}