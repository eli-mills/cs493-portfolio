const express = require('express');
const db = require('./model');
const { auth } = require('express-openid-connect');
const {expressjwt: jwt} = require('express-jwt');
const jwksRsa = require('jwks-rsa');
const jwt_decode = require('jwt-decode');
const {wrap} = require('async-middleware');
const DOMAIN = "millse2-cs493-portfolio.us.auth0.com";

// INITIALIZE ROUTERS
const authentication = express.Router();
const boats = express.Router();
const users = express.Router();

/****************************************************************
 *                                                              *
 *                         MIDDLEWARE                           *
 *                                                              *
****************************************************************/

// LIBRARY MIDDLEWARE
const authMiddleware = auth({
    authRequired: false,
    auth0Logout: true,
    baseURL: process.env.NODE_ENV === "production" ? "https://millse2-cs493-portfolio.uk.r.appspot.com" : 'http://localhost:3000',
    issuerBaseURL: `https://${DOMAIN}`
});

const checkJwt = jwt({
    secret: jwksRsa.expressJwtSecret({
      cache: true,
      rateLimit: true,
      jwksRequestsPerMinute: 5,
      jwksUri: `https://${DOMAIN}/.well-known/jwks.json`
    }),
  
    // Validate the audience and the issuer.
    issuer: `https://${DOMAIN}/`,
    algorithms: ['RS256']
  });

// CUSTOM MIDDLEWARE

function getEntityFromParams(kind) {
    const middlewareFn = async (req, res, next) => {
        const retrievedEntity = await db.getEntity(kind, req.params.id);
        if (!retrievedEntity) return res.status(404).json({"Error": `No ${kind.toLowerCase()} with this ${kind.toLowerCase()}_id exists.`});
        req.retrievedEntity = retrievedEntity;
        next();
    }
    return middlewareFn;
}

/**
 * Returns new copy of given object with added self URL.
 * 
 * @param {object} req: the req object generated by express route
 * @param {string} collection: the name of the collection to use in the URL
 * @param {object} objToModify: the object where the self-link will be added
 * @returns {object} copy of object with added self property
 */
function addSelfLinkToResponse(req, res, next) {
    const retrievedEntity = req.retrievedEntity;
    if (!retrievedEntity) return next();

    const selfLink = `${req.protocol}://${req.get("host")}${req.baseUrl}/${retrievedEntity.id}`;
    retrievedEntity.self = selfLink;
    res.json(retrievedEntity);
}

function assertCorrectOwner(req, res, next) {
    const retrievedEntity = req.retrievedEntity;
    if (!retrievedEntity) return next();

    const owner = retrievedEntity.user;
    if (owner !== req.auth.sub) return res.status(403).json({"Error": "The authorized user does not have access to this boat."});
    next();
}

function assertAcceptJson(req, res, next) {
    if (!req.accepts("json")) {
        return res.status(406).json({"Error": "Requested MIME type is not supported."});
    }
    next();
}

function assertContentJson(req, res, next) {
    if (! (req.get("Content-type") === "application/json")) {
        return res.status(415).json({"Error": "Request body contains unsupported MIME type."});
    }
    next();
}

function handleValidationError(err, req, res, next) {
    if (! (err instanceof db.EntityValidationError)) return next(err);
    console.error(err);
    res.status(400).json({"Error": "One or more of the request attributes are missing or invalid."});
}

/****************************************************************
 *                                                              *
 *                          ROUTERS                             *
 *                                                              *
****************************************************************/

// AUTHENTICATION
authentication.use(authMiddleware);
authentication.get("/", wrap(async (req, res, next) => {
    if (!req.oidc.isAuthenticated()) {
        return next();         // Use Express static middleware to display login page.
    }
    const decoded = jwt_decode(req.oidc.idToken);
    await db.createEntity("User", {sub: decoded.sub});
    res.status(303).redirect("/user-info");
}));
authentication.get("/user-info", (req, res) => {
    res.json(req.oidc.idToken);
});

// BOATS
boats.route("/")
    .get(checkJwt, wrap(async (req, res, next) => {
        // User is authenticated
        const [usersBoats, cursor, count] = await db.getAllEntities("Boat", ["user", "=", req.auth.sub]);
        req.retrievedMetaData = {cursor, count};
        res.status(200).json(usersBoats);
    }))
    .post(assertContentJson, assertAcceptJson, checkJwt, wrap(async (req, res, next) => {
        req.body.user = req.auth.sub;
        try {
            const newBoat = await db.createEntity("Boat", req.body);
            req.retrievedEntity = newBoat;
            res.status(201);
            next();
        } catch (e) {
            next(e);
        }
    }));

boats.route("/:id")
    .all(getEntityFromParams("Boat"))
    .get(checkJwt, assertAcceptJson, assertCorrectOwner, wrap(async (req, res, next) => {
        // Passed all validation...
        res.status(200);
        next();
    }))
    .delete(checkJwt, async (req, res) => {
        const boatToDelete = await db.getEntity("Boat", req.params.boatId);
        if (!boatToDelete || boatToDelete.owner !== req.auth.sub) {
            // ID doesn't exist or owner is unauthorized
            res.status(403).end();
            return;
        }
        db.deleteEntity(boatToDelete);
        res.status(204).end();
    });

boats.use(addSelfLinkToResponse);
boats.use(handleValidationError);

// USERS
users.get("/", async (req, res) => {
    const allUsers = await db.getAllEntities("User");
    res.status(200).json(allUsers);
});

/****************************************************************
 *                                                              *
 *                          EXPORTS                             *
 *                                                              *
****************************************************************/
module.exports = {
    authentication,
    boats,
    users,
}